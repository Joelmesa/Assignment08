import java.util.Random;

public class Sorting {

    // Constants for array sizes and random number boundaries
    private static final int SMALL_ARRAY_SIZE = 2;
    private static final int MEDIUM_ARRAY_SIZE = 4;
    private static final int LARGE_ARRAY_SIZE = 8;
    private static final int MIN_RANDOM_VALUE = 0;
    private static final int MAX_RANDOM_VALUE = 100;

    /**
     * In-place insertion sort of an array
     * 
     * @param arr int[] to sort in-place
     */
    static void insertionSort(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            int current = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > current) {
                arr[j + 1] = arr[j];
                j -= 1;
            }
            arr[j + 1] = current;
        }
    }

    /**
     * Orchestrates an in-place merge sort for an array
     * 
     * @param arr int[] to sort in-place
     */
    static void mergeSort(int[] arr) {
        int n = arr.length;
        if (n > 1) {
            int leftEdge = 0;
            int rightEdge = n - 1;
            sort(arr, leftEdge, rightEdge);
        }
    }

    /**
     * Recursive method to merge sort a subarray.
     * 
     * @param arr       int[] where the subarray is located
     * @param leftEdge  int index to the beginning of the subarray (inclusive)
     * @param rightEdge int index to the end of the subarray (not inclusive)
     */
    static void sort(int[] arr, int leftEdge, int rightEdge) {
        if (leftEdge < rightEdge) {
            int middle = leftEdge + (rightEdge - leftEdge) / 2;
            sort(arr, leftEdge, middle);
            sort(arr, middle + 1, rightEdge);
            merge(arr, leftEdge, middle, rightEdge);
        }
    }

    /**
     * Merges two sorted subarrays into a sorted subarray
     * 
     * @param arr       int[] where the subarrays are located
     * @param leftEdge  beginning of first subarray
     * @param middle    end of first subarray and beginning of second
     * @param rightEdge end of second subarry
     */
    static void merge(int[] arr, int leftEdge, int middle, int rightEdge) {
        int sizeLeft = middle - leftEdge + 1;
        int sizeRight = rightEdge - middle;

        int[] tempLeft = new int[sizeLeft];
        int[] tempRight = new int[sizeRight];

        for (int i = 0; i < sizeLeft; i++) {
            tempLeft[i] = arr[leftEdge + i];
        }
        for (int j = 0; j < sizeRight; j++) {
            tempRight[j] = arr[middle + 1 + j];
        }

        int i = 0, j = 0, k = leftEdge;

        while (i < sizeLeft && j < sizeRight) {
            if (tempLeft[i] < tempRight[j]) {
                arr[k++] = tempLeft[i++];
            } else {
                arr[k++] = tempRight[j++];
            }
        }

        while (i < sizeLeft) {
            arr[k++] = tempLeft[i++];
        }

        while (j < sizeRight) {
            arr[k++] = tempRight[j++];
        }
    }

    /**
     * Creates an array and populates it with random values
     * 
     * @param size     size of array to create
     * @param minValue smallest value in the array
     * @param maxValue largest value in the array
     * @return array of specified length with random numbers between min and max
     *         values given.
     */
    static int[] randomArray(int size, int minValue, int maxValue) {
        Random rand = new Random();
        int[] randArr = new int[size];
        for (int i = 0; i < randArr.length; i++) {
            randArr[i] = minValue + rand.nextInt(1 + maxValue - minValue);
        }
        return randArr;
    }

    public static void main(String[] args) {
        int[] randomArraySmall = randomArray(SMALL_ARRAY_SIZE, MIN_RANDOM_VALUE, MAX_RANDOM_VALUE);
        int[] randomArrayMedium = randomArray(MEDIUM_ARRAY_SIZE, MIN_RANDOM_VALUE, MAX_RANDOM_VALUE);
        int[] randomArrayLarge = randomArray(LARGE_ARRAY_SIZE, MIN_RANDOM_VALUE, MAX_RANDOM_VALUE);

        // Test insertionSort
        System.out.println("Testing insertionSort with small array:");
        insertionSort(randomArraySmall);
        System.out.println(java.util.Arrays.toString(randomArraySmall));

        // Test mergeSort
        System.out.println("Testing mergeSort with medium array:");
        mergeSort(randomArrayMedium);
        System.out.println(java.util.Arrays.toString(randomArrayMedium));
    }

}
